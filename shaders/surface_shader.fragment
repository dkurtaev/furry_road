uniform sampler2D u_opacity_map;
uniform float u_opacity_threshold;
uniform int u_num_layers_above;
uniform int u_n_layers;
uniform float u_opacity_threshold_step;
uniform vec2 u_tex_coords_shift;

varying vec2 v_position;
varying vec4 v_color;
varying vec2 v_tex_coords;

void main() {
  float alpha = texture2D(u_opacity_map, v_tex_coords)[0];
  if (alpha < u_opacity_threshold) {
    alpha = 0.0;
  }
  gl_FragColor = v_color;
  gl_FragColor[3] = alpha;
  
  vec2 shifted_tex_coords = v_tex_coords + u_tex_coords_shift;
  for (int i = 0; i < u_num_layers_above; ++i) {
  	if (0.0 <= shifted_tex_coords[0] && shifted_tex_coords[0] <= 1.0 &&
  		0.0 <= shifted_tex_coords[1] && shifted_tex_coords[1] <= 1.0) {
  	  alpha = texture2D(u_opacity_map, shifted_tex_coords)[0];
  	  float threshold = u_opacity_threshold +
  	  					(float(i) + 1.0) * u_opacity_threshold_step;
      if (alpha >= threshold) {
      	alpha = gl_FragColor[3];
      	float ratio = (float(u_n_layers) - 1.0 - float(u_num_layers_above)) /
      				  (float(u_n_layers) - 1.0);
      	ratio = sqrt(ratio);
      	gl_FragColor *= ratio;
        gl_FragColor[3] = alpha;
	    break;
	  }
  	  shifted_tex_coords += u_tex_coords_shift;
  	} else {
  	  break;
  	} 	
  }
}
